
JPW 01/12/2007
This is an older version of UDPCapture, before adding the "-i" and "-l" command line flags.

// UDPCapture - receives UDP packets, writes them to a RBNB
// EMF
// 3/31/05
// for IOScan

import java.net.DatagramPacket;
import java.net.DatagramSocket;
import com.rbnb.sapi.Source;
import com.rbnb.sapi.ChannelMap;
import com.rbnb.utility.ArgHandler;
import com.rbnb.utility.RBNBProcess;

public class UDPCapture {
	DatagramSocket ds=null; //listen for data here
	Source src=null; //write data here
	String serverAddress="localhost:3333";
	String name=new String("UDPCapture");
	int cache=100;
	String mode=new String("none");
	int archive=0;
	int ssNum=4444;
	double lastTime=0;
	
	public static void main(String[] arg) {
		new UDPCapture(arg).start();
	}
	
	public UDPCapture(String[] arg) {
		try {
			ArgHandler ah=new ArgHandler(arg);
			if (ah.checkFlag('h')) {
				System.err.println("UDPCapture");
				System.err.println(" -h                  : print this usage info");
				System.err.println(" -a <server address> : address of RBNB server to write packets to");
				System.err.println("             default : localhost:3333");
				System.err.println(" -n <name>           : name of RBNB source to write packets to");
				System.err.println("             default : UDPCapture");
				System.err.println(" -s <server socket>  : socket number to listen for UDP packets on");
				System.err.println("             default : 4444");
				System.err.println(" -k <num>            : archive (disk) frames, append");
				System.err.println(" -K <num>            : archive (disk) frames, create");
				System.err.println("             default : 0 (no archiving)");
				RBNBProcess.exit(0);
			}
			if (ah.checkFlag('a')) {
				String serverAddressL=ah.getOption('a');
				if (serverAddress!=null) serverAddress=serverAddressL;
			}
			if (ah.checkFlag('n')) {
				String nameL=ah.getOption('n');
				if (nameL!=null) name=nameL;
			}
			if (ah.checkFlag('k')) {
				String naf=ah.getOption('k');
				if (naf!=null) archive=Integer.parseInt(naf);
				if (archive>0) {
					mode=new String("append");  // was "create"
					if (archive<cache) cache=archive;
				}
			}
			if (ah.checkFlag('K')) {
				String naf=ah.getOption('K');
				if (naf!=null) archive=Integer.parseInt(naf);
				if (archive>0) {
					mode=new String("create");  
					if (archive<cache) cache=archive;
				}
			}
			if (ah.checkFlag('s')) {
				String nss=ah.getOption('s');
				if (nss!=null) ssNum=Integer.parseInt(nss);
			}
		} catch (Exception e) {
			System.err.println("Exception parsing arguments:");
			e.printStackTrace();
			System.err.println("UDPCapture");
			System.err.println(" -h                  : print this usage info");
			System.err.println(" -a <server address> : address of RBNB server to write packets to");
			System.err.println("             default : localhost:3333");
			System.err.println(" -n <name>           : name of RBNB source to write packets to");
			System.err.println("             default : UDPCapture");
			System.err.println(" -s <server socket>  : socket number to listen for UDP packets on");
			System.err.println("             default : 4444");
			System.err.println(" -k <num>            : archive (disk) frames");
			System.err.println("             default : 0 (no archiving)");
			RBNBProcess.exit(0);
		}
		
		try {
			ds=new DatagramSocket(ssNum); //open port for incoming UDP
			src=new Source(cache,mode,archive);
			src.OpenRBNBConnection(serverAddress,name);
                        System.err.println("UDPCapture opened RBNB connection to "+serverAddress);

		} catch (Exception e) { e.printStackTrace(); }
                
	}
	
	public void start() {
		try {
			DatagramPacket dp=new DatagramPacket(new byte[65536],65536);
			while (true) {
				ds.receive(dp);
				if (dp.getLength()>0) {
					ChannelMap[] cm=process(dp);
					for (int i=0;i<cm.length;i++) {
//System.err.println("flushing "+cm[i]);
						if (cm[i]!=null) src.Flush(cm[i]);
					}
				}
			}
		} catch (Exception e) { e.printStackTrace(); }
	}
	
	//method may be overridden to convert data into more meaningful values
	public ChannelMap[] process(DatagramPacket dp) {
		ChannelMap[] cm=new ChannelMap[1];
		cm[0]=new ChannelMap();
		try {
			byte[] data=new byte[dp.getLength()];
			System.arraycopy(dp.getData(),dp.getOffset(),data,0,dp.getLength());
//System.err.println("received "+new String(data));
			int idx=cm[0].Add("UDP");
			double time=System.currentTimeMillis()/1000.0;
System.err.println("received "+data.length+" bytes at "+com.rbnb.api.Time.since1970(time));
			//avoid duplicate timestamps
			if (time <= lastTime) time=lastTime+0.01;
			lastTime=time;
			cm[0].PutTime(time,0);
			//cm[0].PutTimeAuto("timeofday");
			cm[0].PutDataAsByteArray(idx,data);
		} catch (Exception e) { e.printStackTrace(); }
		return cm;
	}
	
} //end class UDPCapture
